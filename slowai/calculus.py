# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_calculus.ipynb.

# %% auto 0
__all__ = ['MNISTDataModule']

# %% ../nbs/03_calculus.ipynb 2
from dataclasses import dataclass
from typing import Any

import lightning as L
import matplotlib.pyplot as plt
import numpy as np
import sympy
import torch
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
from einops import einsum, rearrange
from torch import nn
from torch.utils.data import DataLoader

from .overview import show_image

# %% ../nbs/03_calculus.ipynb 8
class MNISTDataModule(L.LightningDataModule):
    def __init__(self, bs=128):
        super().__init__()
        self.bs = bs

    def setup(self, stage=None):
        transform = transforms.Compose([transforms.ToTensor()])
        self.trn = torchvision.datasets.MNIST(
            root="./data",
            train=True,
            transform=transform,
            download=True,
        )
        self.tst = torchvision.datasets.MNIST(
            root="./data",
            train=False,
            transform=transform,
            download=True,
        )

    def train_dataloader(self):
        return DataLoader(
            self.trn,
            batch_size=self.bs,
            shuffle=True,
        )

    def test_dataloader(self):
        return DataLoader(
            self.tst,
            batch_size=self.bs,
            shuffle=False,
        )

    def as_matrix(self, split):
        data = dm.trn if split == "trn" else dm.tst
        xs, ys = zip(*data)
        xs = torch.stack(xs).squeeze()
        ys = torch.tensor(ys)
        return xs, ys
