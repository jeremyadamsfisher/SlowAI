# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/14_style_transfer.ipynb.

# %% auto 0
__all__ = ['imagenet_mean', 'imagenet_std', 'pt_normalize_imagenet', 'calculate_features_vgg16', 'calculate_grams_vgg16',
           'GramLoss']

# %% ../nbs/14_style_transfer.ipynb 3
from functools import partial

import timm
import torch
import torch.nn.functional as F
import torchvision.transforms as T
from torch import nn, tensor

from slowai.learner import (
    DataLoaders,
    Learner,
    MetricsCB,
    ProgressCB,
    TrainCB,
    TrainLearner,
    def_device,
)
from .utils import download_image, show_image, show_images

# %% ../nbs/14_style_transfer.ipynb 18
imagenet_mean = tensor([0.485, 0.456, 0.406])
imagenet_std = tensor([0.229, 0.224, 0.225])

# %% ../nbs/14_style_transfer.ipynb 23
pt_normalize_imagenet = T.Normalize(imagenet_mean, imagenet_std)

# %% ../nbs/14_style_transfer.ipynb 26
def calculate_features_vgg16(vgg16, imgs, target_layers=(18, 25)):
    x = pt_normalize_imagenet(imgs).to(def_device)
    features = []
    for i, layer in enumerate(vgg16.features[: max(target_layers) + 1]):
        x = layer(x)
        if i in target_layers:
            features.append(x.clone())
    return features

# %% ../nbs/14_style_transfer.ipynb 35
def calculate_grams_vgg16(vgg16, imgs, target_layers=(18, 25)):
    feats = calculate_features_vgg16(vgg16, imgs, target_layers)
    grams_ = []
    for f in feats:
        c, h, w = f.shape
        g = torch.einsum("chw, dhw -> cd", f, f)
        gnorm = g / (h * w)
        grams_.append(gnorm)
    return grams_

# %% ../nbs/14_style_transfer.ipynb 36
class GramLoss:
    def __init__(
        self,
        target_img,
        target_layers=(18, 25),  # out of 30
        vgg=timm.create_model("vgg16", pretrained=True).to(def_device),
    ):
        self.gram = partial(calculate_grams_vgg16, vgg, target_layers=target_layers)
        with torch.no_grad():
            self.tgt = self.gram(target_img)

    def __call__(self, img, _=None):
        inp = self.gram(img)
        return sum(F.mse_loss(f1, f2) for f1, f2 in zip(inp, self.tgt))
